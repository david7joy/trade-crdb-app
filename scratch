pgworkload run -w trade.py -c 4 --url 'postgres://root@localhost:26257/bank?sslmode=disable&application_name=trade_db' -d 120 -i 100000

import datetime as dt
import psycopg
import random
import uuid
import logging

"""
# init the database

pgworkload init -w Trade.py -c=1 --url='postgres://cockroach:cockroach@localhost:26257/defaultdb?sslmode=require' -l debug --drop -i

# run from each LB
pgworkload run -w Trade.py --url 'postgres://cockroach:cockroach@localhost:26257/Trade?sslmode=require&application_name=Trade' -c 9 -l debug --args '{"prefix": "E2"}'

pgworkload run -w Trade.py --url 'postgres://cockroach:cockroach@localhost:26257/Trade?sslmode=require&application_name=Trade' -c 9 -l debug --args '{"prefix": "W1"}'

pgworkload run -w Trade.py --url 'postgres://cockroach:cockroach@localhost:26257/Trade?sslmode=require&application_name=Trade' -c 9 -l debug --args '{"prefix": "E1"}'

"""


class Trade:
    def __init__(self, args: dict):
        # args is a dict of string passed with the --args flag
        # user passed a yaml/json, in python that's a dict object

        self.read_pct: float = float(args.get("read_pct", 0) / 100)

        # E1 = us-east-1
        # E2 = us-east-2
        # W1 = us-west-1
        self.prefix: str = args.get("prefix", "E1")
        self.region: str = args.get("region", "")

        self.schema: str = ""
        self.load: str = ""

        self.oid = str(uuid.uuid4())

        # orders
        self.order_row_id = ""
        self.order_nbr = ""
        self.account_nbr = 0
        self.order_entry_ts = dt.datetime.now()
        self.total_qty = 0
        self.fix_side = ""
        self.side = self.fix_side
        self.symbol = ""
        self.symbol_id = 0
        self.lim_order_number = 0
        self.prop_text = ""

        # order_activity
        self.activity_id = ""

        # execution
        self.execution_id = ""

    def init(self, conn: psycopg.Connection):
        with conn.cursor() as cur:
            logging.info(cur.execute("select version();").fetchone())

    def run(self):
        return [self.txn_order_entry, self.read, self.txn3]

    def read(self, conn: psycopg.Connection):
        with conn.cursor() as cur:
            cur.execute(
                """
               with select_query AS
             (SELECT o.* 
             FROM orders o JOIN order_activity oa
                 ON oa.order_row_id = o.order_row_id
                 AND o.crdb_region = oa.crdb_region
             WHERE o.order_nbr = %s
                 AND o.crdb_region = %s ) SELECT * FROM select_query AS OF SYSTEM TIME follower_read_timestamp();
            """,
                (self.order_nbr, self.region),
            )

            cur.fetchone()

    def txn_order_entry(self, conn: psycopg.Connection):
        self.oid = str(uuid.uuid4())

        # orders
        self.order_row_id = f"{self.prefix}-{self.oid}"
        self.order_nbr = self.oid
        self.account_nbr = self.oid
        self.order_entry_ts = dt.datetime.now()
        self.total_qty = random.randint(1000, 100000)
        self.fix_side = random.choice(["BUY", "SELL"])
        self.side = self.fix_side
        self.symbol = random.choice(["IBM", "AAPL", "BRK-B", "AMD", "BABA", "NVDA"])
        self.symbol_id = random.randint(1, 1000)
        self.lim_order_number = random.randint(1000, 2000)
        self.prop_text = (
            "aroeingbqregpiquhgbaoerignqaroeihgbreo[mbnre[owbibrenbehswarguhegh"
        )

        # order_activity
        self.activity_id = uuid.uuid4()

        with conn.transaction() as tx:
            with conn.cursor() as cur:
                stmt = """
                    insert into orders 
                    values (
                        %s, %s, %s, %s, %s,
                        %s, %s, %s, %s, %s,
                        %s
                        )
                    """
                cur.execute(
                    stmt,
                    (
                        self.order_row_id,
                        self.order_nbr,
                        self.account_nbr,
                        self.order_entry_ts,
                        self.total_qty,
                        self.fix_side,
                        self.side,
                        self.symbol,
                        self.symbol_id,
                        self.lim_order_number,
                        self.prop_text,
                    ),
                )

                stmt = """
                insert into order_activity
                values (
                    %s, %s, %s, %s, %s,
                    %s  
                )
                """

                cur.execute(
                    stmt,
                    (
                        self.order_row_id,
                        self.order_nbr,
                        self.account_nbr,
                        self.activity_id,
                        self.order_entry_ts,
                        self.total_qty,
                    ),
                )

                # order_activity
                self.activity_id = uuid.uuid4()

                cur.execute(
                    stmt,
                    (
                        self.order_row_id,
                        self.order_nbr,
                        self.account_nbr,
                        self.activity_id,
                        self.order_entry_ts,
                        self.total_qty,
                    ),
                )

            # run 2 individual inserts into the order_activity
            # gen uuid for activity

            # order_nbm and accoutnnumber set to UUID
            # the oid is the uuid used as below
            # uuid in orders table for order_nbr should be the same across this entire transaction

    def txn2(self, conn: psycopg.Connection):
        with conn.transaction() as tx:
            with conn.cursor() as cur:
                self.activity_id = f"AC-{self.oid}"
                self.order_entry_ts = dt.datetime.now()

                stmt = """
                    insert into order_activity (
                        order_row_id, 
                        activity_id, 
                        order_nbr,
                        account_nbr, 
                        order_entry_ts, 
                        total_qty) 
                    values (%s, %s, %s, %s, %s, %s);
                    """

                cur.execute(
                    stmt,
                    (
                        self.order_row_id,
                        self.activity_id,
                        self.order_nbr,
                        self.account_nbr,
                        self.order_entry_ts,
                        self.total_qty,
                    ),
                )

    def txn3(self, conn: psycopg.Connection):
        with conn.transaction() as tx:
            with conn.cursor() as cur:
                self.execution_id = f"XE-{self.oid}"
                self.order_entry_ts = dt.datetime.now()

                stmt = """
                    insert into executions (
                        order_row_id, 
                        order_nbr, 
                        account_nbr, 
                        execution_id,
                        order_entry_ts, 
                        total_qty) 
                    values (%s, %s, %s, %s, %s, %s);
                    """

                cur.execute(
                    stmt,
                    (
                        self.order_row_id,
                        self.order_nbr,
                        self.account_nbr,
                        self.execution_id,
                        self.order_entry_ts,
                        self.total_qty,
                    ),
                )


# all the ex running code 
import datetime as dt
import psycopg
import random
import uuid
import string
from decimal import Decimal

class Tradeorder:
    def __init__(self, args: dict):

        self.read_pct: float = float(args.get("read_pct", 50) / 100)

        # users
        self.order_id = uuid.uuid4()               

    def setup(self, conn: psycopg.Connection, id: int, total_thread_count: int):
        with conn.cursor() as cur:
            print(f"My thread ID is {id}. The total count of threads is {total_thread_count}")
            print(cur.execute(f"select version()").fetchone())

    def run(self):
        return [self.txn_order, self.txn_processing]
    
    def txn_order(self, conn: psycopg.Connection):
               
        with conn.cursor() as cur:
            cur.execute(
                    "select symbol,current_price from instruments order by random() limit 1;",
                )
            instrument = cur.fetchone()
            self.symbol = instrument[0]
            self.unit_price = float(instrument[1])

            cur.execute(
                    "select account_nbr from accounts order by random() limit 1;",
                )
            accounts = cur.fetchone()
            self.account_nbr = accounts[0]
        
        # orders
        self.order_id = uuid.uuid4()
        self.order_nbr = ''.join(random.choices(string.ascii_uppercase + string.digits, k=14)) # 10-character order number
        self.order_entry_ts = dt.datetime.now()
        self.total_qty = random.randint(1, 100)  # Random quantity between 1 and 100
        self.order_type = random.choice(["BUY", "SELL"])  # Randomly choose between BUY and SELL

        # insert into orders
        with conn.cursor() as cur:
            stmt = """
                insert into orders values (%s, %s, %s, %s, %s, %s, %s, %s);
                """
            cur.execute(stmt, (self.order_id, self.order_nbr, self.account_nbr, self.symbol, self.order_entry_ts, self.total_qty, self.order_type, self.unit_price))
        
        # order activity
        self.activity_id = uuid.uuid4()
        self.order_status = "order_received"
        self.activity_entry_ts = dt.datetime.now()

        # inserts into order_activity
        with conn.cursor() as cur:
            stmt = """
                insert into order_activity values (%s, %s, %s, %s, %s, %s, %s, %s, %s);
                """
            cur.execute(stmt, (self.activity_id, self.order_id, self.order_nbr, self.order_status, self.activity_entry_ts, self.symbol, self.total_qty, self.order_type,self.unit_price))

        # Update trade price by updating the current_price per order
        if self.order_type == "BUY":
            self.new_stock_price = self.unit_price + 0.10
        else:
            self.new_stock_price = self.unit_price - 0.10

        # Update instruments
        update_instruments_stmt = """
            UPDATE instruments SET current_price = %s WHERE symbol = %s;
        """
        cur.execute(update_instruments_stmt, (Decimal(self.new_stock_price), self.symbol))

    #order processing 
    def txn_processing(self, conn: psycopg.Connection):
        with conn.cursor() as cur:
            # Fetch orders with status 'order_received' that have not been processed
            cur.execute(
                    "SELECT order_id, order_nbr, symbol, total_qty, order_type,unit_price \
                    FROM order_activity \
                    WHERE order_status = 'order_received' \
                    AND order_id NOT IN ( \
                        SELECT order_id \
                        FROM order_activity \
                        WHERE order_status = 'order_processed' \
                    ) \
                    ORDER BY activity_entry_ts ASC \
                    FOR UPDATE SKIP LOCKED;",
            )
            orders_for_processing = cur.fetchall()

            for order_activity in orders_for_processing:
                self.order_id = order_activity[0]
                self.order_nbr = order_activity[1]
                self.symbol = order_activity[2]
                self.total_qty = order_activity[3]
                self.order_type = order_activity[4]
                self.unit_price = order_activity[5]

                self.execution_id = uuid.uuid4()
                self.order_status = "order_processed"
                self.order_executed_ts = dt.datetime.now()

                # Insert into order_processing
                processing_stmt = """
                    INSERT INTO order_processing (execution_id, order_id, order_status, order_nbr, order_executed_ts, symbol, total_qty, unit_price)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                """
                cur.execute(processing_stmt, (self.execution_id, self.order_id, self.order_status, self.order_nbr, self.order_executed_ts, self.symbol, self.total_qty, self.unit_price))

                # Insert a new entry into order_activity to log the processing activity
                self.activity_id = uuid.uuid4()
                self.activity_entry_ts = dt.datetime.now()
                new_activity_stmt = """
                    INSERT INTO order_activity (activity_id, order_id, order_nbr, order_status, activity_entry_ts, symbol, total_qty, order_type, unit_price)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);
                """
                cur.execute(new_activity_stmt, (self.activity_id, self.order_id, self.order_nbr, self.order_status, self.activity_entry_ts, self.symbol, self.total_qty, self.order_type, self.unit_price))

                # Insert into trades
                self.trade_price = self.unit_price
                self.trade_id = uuid.uuid4()
                self.trade_ts = dt.datetime.now()
                trade_stmt = """
                    INSERT INTO trades (trade_id, execution_id, symbol, order_type, trade_price, quantity, trade_ts)
                    VALUES (%s, %s, %s, %s, %s, %s, %s);
                """
                cur.execute(trade_stmt, (self.trade_id, self.execution_id, self.symbol, self.order_type, self.trade_price, self.total_qty, self.trade_ts))

                # Fetch the current price of the symbol
                cur.execute("SELECT current_price FROM instruments WHERE symbol = %s;", (self.symbol,))
                instrument = cur.fetchone()
                self.new_stock_price = float(instrument[0])
        
         # Commit the transaction to ensure all changes are saved

        print(f"Order : {self.order_nbr} [{self.order_type} | {self.symbol} | {self.trade_price} | {round(self.new_stock_price,2)}] - processed successfully")
